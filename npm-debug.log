0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'install', 'ffmpeg', '-g' ]
2 info using npm@2.7.1
3 info using node@v0.10.29
4 verbose node symlink /usr/local/bin/node
5 silly cache add args [ 'ffmpeg', null ]
6 verbose cache add spec ffmpeg
7 silly cache add parsed spec { raw: 'ffmpeg',
7 silly cache add   scope: null,
7 silly cache add   name: 'ffmpeg',
7 silly cache add   rawSpec: '',
7 silly cache add   spec: '*',
7 silly cache add   type: 'range' }
8 verbose addNamed ffmpeg@*
9 silly addNamed semver.valid null
10 silly addNamed semver.validRange *
11 silly addNameRange { name: 'ffmpeg', range: '*', hasData: false }
12 silly mapToRegistry name ffmpeg
13 silly mapToRegistry using default registry
14 silly mapToRegistry registry https://registry.npmjs.org/
15 silly mapToRegistry uri https://registry.npmjs.org/ffmpeg
16 verbose addNameRange registry:https://registry.npmjs.org/ffmpeg not in flight; fetching
17 verbose request uri https://registry.npmjs.org/ffmpeg
18 verbose request no auth needed
19 info attempt registry request try #1 at 18:23:58
20 verbose request id 8f2023eda7901963
21 http request GET https://registry.npmjs.org/ffmpeg
22 http 200 https://registry.npmjs.org/ffmpeg
23 silly get cb [ 200,
23 silly get   { server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
23 silly get     etag: '"2SZN1HWLJ0QNDA1W8RVEYY0S3"',
23 silly get     'content-type': 'application/json',
23 silly get     'cache-control': 'max-age=60',
23 silly get     'content-length': '26536',
23 silly get     'accept-ranges': 'bytes',
23 silly get     date: 'Fri, 08 May 2015 11:24:00 GMT',
23 silly get     via: '1.1 varnish',
23 silly get     age: '0',
23 silly get     connection: 'keep-alive',
23 silly get     'x-served-by': 'cache-lax1432-LAX',
23 silly get     'x-cache': 'MISS',
23 silly get     'x-cache-hits': '0',
23 silly get     'x-timer': 'S1431084240.451199,VS0,VE380',
23 silly get     vary: 'Accept' } ]
24 verbose get saving ffmpeg to /Users/goer/.npm/registry.npmjs.org/ffmpeg/.cache.json
25 silly addNameRange number 2 { name: 'ffmpeg', range: '*', hasData: true }
26 silly addNameRange versions [ 'ffmpeg', [ '0.0.1', '0.0.2', '0.0.3', '0.0.4' ] ]
27 verbose addNamed ffmpeg@0.0.4
28 silly addNamed semver.valid 0.0.4
29 silly addNamed semver.validRange 0.0.4
30 silly mapToRegistry name ffmpeg
31 silly mapToRegistry using default registry
32 silly mapToRegistry registry https://registry.npmjs.org/
33 silly mapToRegistry uri https://registry.npmjs.org/ffmpeg
34 verbose addRemoteTarball https://registry.npmjs.org/ffmpeg/-/ffmpeg-0.0.4.tgz not in flight; adding
35 verbose addRemoteTarball [ 'https://registry.npmjs.org/ffmpeg/-/ffmpeg-0.0.4.tgz',
35 verbose addRemoteTarball   '1c460df8e7da5127f62ceef4bfa06c59c89630cb' ]
36 info retry fetch attempt 1 at 18:24:01
37 info attempt registry request try #1 at 18:24:01
38 http fetch GET https://registry.npmjs.org/ffmpeg/-/ffmpeg-0.0.4.tgz
39 http fetch 200 https://registry.npmjs.org/ffmpeg/-/ffmpeg-0.0.4.tgz
40 silly fetchAndShaCheck shasum 1c460df8e7da5127f62ceef4bfa06c59c89630cb
41 verbose addTmpTarball /var/folders/4v/g81mml3911n1dlq_rrr7g0t80000gn/T/npm-2270-f261a2fc/registry.npmjs.org/ffmpeg/-/ffmpeg-0.0.4.tgz not in flight; adding
42 verbose addTmpTarball already have metadata; skipping unpack for ffmpeg@0.0.4
43 silly cache afterAdd ffmpeg@0.0.4
44 verbose afterAdd /Users/goer/.npm/ffmpeg/0.0.4/package/package.json not in flight; writing
45 verbose afterAdd /Users/goer/.npm/ffmpeg/0.0.4/package/package.json written
46 silly install resolved [ { name: 'ffmpeg',
46 silly install resolved     description: 'Utility for managing video streams using ffmpeg',
46 silly install resolved     version: '0.0.4',
46 silly install resolved     author: { name: 'Damiano Ciarla', email: 'damiano.ciarl@gmail.com' },
46 silly install resolved     repository:
46 silly install resolved      { type: 'git',
46 silly install resolved        url: 'https://github.com/damianociarla/node-ffmpeg.git' },
46 silly install resolved     main: './index.js',
46 silly install resolved     dependencies: { when: '>= 0.0.1' },
46 silly install resolved     readme: 'node-ffmpeg\n===========\n\n[FFmpeg](http://ffmpeg.org/) module for [Node](http://nodejs.org/). This library provides a set of functions and utilities to abstract commands-line usage of ffmpeg. To use this library requires that ffmpeg is already installed (including all necessary encoding libraries like libmp3lame or libx264)\n\nYou can install this module using [npm](http://github.com/isaacs/npm):\n\n\tnpm install ffmpeg\n\n## Usage\n\nTo start using this library, you must include it in your project and then you can either use the callback function or through the [promise](https://github.com/cujojs/when) library:\n\n\tvar ffmpeg = require(\'ffmpeg\');\n\t\nUse the callback function\n\t\n\ttry {\n\t\tnew ffmpeg(\'/path/to/your_movie.avi\', function (err, video) {\n\t\t\tif (!err) {\n\t\t\t\tconsole.log(\'The video is ready to be processed\');\n\t\t\t} else {\n\t\t\t\tconsole.log(\'Error: \' + err);\n\t\t\t}\n\t\t});\n\t} catch (e) {\n\t\tconsole.log(e.code);\n\t\tconsole.log(e.msg);\n\t}\n\t\nUse the approach with the library promise\n\n\ttry {\n\t\tvar process = new ffmpeg(\'/path/to/your_movie.avi\');\n\t\tprocess.then(function (video) {\n\t\t\tconsole.log(\'The video is ready to be processed\');\n\t\t}, function (err) {\n\t\t\tconsole.log(\'Error: \' + err);\n\t\t});\n\t} catch (e) {\n\t\tconsole.log(e.code);\n\t\tconsole.log(e.msg);\n\t}\n\t\n## The video object\n\nEach time you create a new instance, this library provides a new object to retrieve the information of the video, the ffmpeg configuration and all methods to make the necessary conversions:\n\n\ttry {\n\t\tvar process = new ffmpeg(\'/path/to/your_movie.avi\');\n\t\tprocess.then(function (video) {\n\t\t\t// Video metadata\n\t\t\tconsole.log(video.metadata);\n\t\t\t// FFmpeg configuration\n\t\t\tconsole.log(video.info_configuration);\n\t\t}, function (err) {\n\t\t\tconsole.log(\'Error: \' + err);\n\t\t});\n\t} catch (e) {\n\t\tconsole.log(e.code);\n\t\tconsole.log(e.msg);\n\t}\n\t\n## Preset functions\n\nThe video object contains a set of functions that allow you to perform specific operations independent of the settings for the conversion. In all the functions you can use the approach with the callback function or with the promise object\n\n### *video.fnExtractSoundToMP3 (destionationFileName, callback)*\n\nThis function extracts the audio stream of a video into an mp3 file\n\nParams:\n\n*\t__destionationFileName__: Full path of the new file:\n\t> /path/to/your_audio_file.mp3\n\n*\t__callback__: *(optional)* If specified at the end of the process it will return the path of the new audio file:\n\t> function (error, file)\n\nExample:\n\n\ttry {\n\t\tvar process = new ffmpeg(\'/path/to/your_movie.avi\');\n\t\tprocess.then(function (video) {\n\t\t\t// Callback mode\n\t\t\tvideo.fnExtractSoundToMP3(\'/path/to/your_audio_file.mp3\', function (error, file) {\n\t\t\t\tif (!error)\n\t\t\t\t\tconsole.log(\'Audio file: \' + file);\n\t\t\t});\n\t\t}, function (err) {\n\t\t\tconsole.log(\'Error: \' + err);\n\t\t});\n\t} catch (e) {\n\t\tconsole.log(e.code);\n\t\tconsole.log(e.msg);\n\t}\n\n### *video.fnExtractFrameToJPG(destinationFolder, settings, callback)*\n\nThis function takes care of extracting one or more frames from the video that is being developed. At the end of the operation will return an array containing the list of extracted images\n\nParams:\n\n*\t__destinationFolder__: Destination folder for the frames generated:\n\t> /path/to/save_your_frames\n\n*\t__settings__: *(optional)* Settings to change the default settings:\n\n\t\t{\n\t\t\tstart_time\t\t\t\t: null\t\t// Start time to recording\n\t\t  , duration_time\t\t\t: null\t\t// Duration of recording\n\t\t  , frame_rate\t\t\t\t: null\t\t// Number of the frames to capture in one second\n\t\t  , size\t\t\t\t\t: null\t\t// Dimension each frame\n\t\t  , number\t\t\t\t\t: null\t\t// Total frame to capture\n\t\t  , every_n_frames\t\t\t: null\t\t// Frame to capture every N frames\n\t\t  , every_n_seconds\t\t\t: null\t\t// Frame to capture every N seconds\n\t\t  , every_n_percentage\t\t: null\t\t// Frame to capture every N percentage range\n\t\t  , keep_pixel_aspect_ratio\t: true\t\t// Mantain the original pixel video aspect ratio\n\t\t  , keep_aspect_ratio\t\t: true\t\t// Mantain the original aspect ratio\n\t\t  , padding_color\t\t\t: \'black\'\t// Padding color\n\t\t  , file_name\t\t\t\t: null\t\t// File name\n\t\t}\n\n*\t__callback__: *(optional)* If specified at the end of the process will be returned list of paths of frames created:\n\t> function (error, files)\n\nExample:\n\n\ttry {\n\t\tvar process = new ffmpeg(\'/path/to/your_movie.avi\');\n\t\tprocess.then(function (video) {\n\t\t\t// Callback mode\n\t\t\tvideo.fnExtractFrameToJPG(\'/path/to/save_your_frames\', {\n\t\t\t\tframe_rate : 1,\n\t\t\t\tnumber : 5,\n\t\t\t\tfile_name : \'my_frame_%t_%s\'\n\t\t\t}, function (error, files) {\n\t\t\t\tif (!error)\n\t\t\t\t\tconsole.log(\'Frames: \' + files);\n\t\t\t});\n\t\t}, function (err) {\n\t\t\tconsole.log(\'Error: \' + err);\n\t\t});\n\t} catch (e) {\n\t\tconsole.log(e.code);\n\t\tconsole.log(e.msg);\n\t}\n\n### *video.fnAddWatermark(watermarkPath, newFilepath, settings, callback)* \n\nThis function takes care of adding a watermark to the video that is being developed. You can specify the exact position in which position the image\n\nParams:\n\n*\t__watermarkPath__: The full path where the image is stored to add as watermark:\n\t> /path/to/retrieve/watermark_file.png\n\n*\t__newFilepath__: *(optional)* Name of the new video. If not specified will be created by the function:\n\t> /path/to/save/your_file_video.mp4\n\n*\t__settings__: *(optional)* Settings to change the default settings:\n\n\t\t{\n\t\t\tposition\t\t: "SW"\t\t// Position: NE NC NW SE SC SW C CE CW\n\t\t  , margin_nord\t\t: null\t\t// Margin nord\n\t\t  , margin_sud\t\t: null\t\t// Margin sud\n\t\t  , margin_east\t\t: null\t\t// Margin east\n\t\t  , margin_west\t\t: null\t\t// Margin west\n\t\t};\n\n*\t__callback__: *(optional)* If specified at the end of the process it will return the path of the new video containing the watermark:\n\t> function (error, files)\n\nExample:\n\n\ttry {\n\t\tvar process = new ffmpeg(\'/path/to/your_movie.avi\');\n\t\tprocess.then(function (video) {\n\t\t\t// Callback mode\n\t\t\tvideo.fnAddWatermark(\'/path/to/retrieve/watermark_file.png\', \'/path/to/save/your_file_video.mp4\', {\n\t\t\t\tposition : \'SE\'\n\t\t\t}, function (error, file) {\n\t\t\t\tif (!error)\n\t\t\t\t\tconsole.log(\'New video file: \' + file);\n\t\t\t});\n\t\t}, function (err) {\n\t\t\tconsole.log(\'Error: \' + err);\n\t\t});\n\t} catch (e) {\n\t\tconsole.log(e.code);\n\t\tconsole.log(e.msg);\n\t}\n\n## Custom settings\n\nIn addition to the possibility of using the preset, this library provides a variety of settings with which you can modify to your liking settings for converting video\n\n*\t__video.setDisableAudio()__: Disables audio encoding\n\n*\t__video.setDisableVideo()__: Disables video encoding\n\n*\t__video.setVideoFormat(format)__: Sets the new video format. Example:\n\t\t\n\t\tvideo.setVideoFormat(\'avi\')\n\n*\t__video.setVideoCodec(codec)__: Sets the new audio codec. Example:\n\t\n\t\tvideo.setVideoCodec(\'mpeg4\')\n\n*\t__video.setVideoBitRate(bitrate)__: Sets the video bitrate in kb. Example:\n\t\n\t\tvideo.setVideoBitRate(1024)\n\n*\t__video.setVideoFrameRate(framerate)__: Sets the framerate of the video. Example:\n\t\n\t\tvideo.setVideoFrameRate(25)\n\n*\t__video.setVideoStartTime(time)__: Sets the start time. You can specify the value in seconds or in date time format. Example:\n\t\n\t\t// Seconds\n\t\tvideo.setVideoStartTime(13)\n\n\t\t// Date time format\n\t\tvideo.setVideoStartTime(\'00:00:13\')\n\n*\t__video.setVideoDuration(duration)__: Sets the duration. You can specify the value in seconds or in date time format. Example:\n\n\t\t// Seconds\n\t\tvideo.setVideoDuration(100)\n\n\t\t// Date time format\n\t\tvideo.setVideoDuration(\'00:01:40\')\n\n*\t__video.setVideoAspectRatio(aspect)__: Sets the new aspetc ratio. You can specify the value with a number or with a string in the format \'xx:xx\'. Example:\n\n\t\t// Value\n\t\tvideo.setVideoAspectRatio(1.77)\n\n\t\t// Format xx:xx\n\t\tvideo.setVideoAspectRatio(\'16:9\')\n\n*\t__video.setVideoSize(size, keepPixelAspectRatio, keepAspectRatio, paddingColor)__: Set the size of the video. This library can handle automatic resizing of the video. You can also apply a padding automatically keeping the original aspect ratio\n\t\n\tThe following size formats are allowed to be passed to _size_:\n\n\t> 640x480 _Fixed size (plain ffmpeg way)_\n\n\t> 50% _Percental resizing_\n\n\t> ?x480 _Fixed height, calculate width_\n\n\t> 640x? _Fixed width, calculate height_\n\n\tExample:\n\n\t\t// In this example, the video will be automatically resized to 640 pixels wide and will apply a padding white\n\t\tvideo.setVideoSize(\'640x?\', true, true, \'#fff\')\n\n\t\t// In this example, the video will be resized to 640x480 pixel, and if the aspect ratio is different the video will be stretched\n\t\tvideo.setVideoSize(\'640x480\', true, false)\n\n*\t__video.setAudioCodec(codec)__: Sets the new audio codec. Example:\n\t\n\t\tvideo.setAudioCodec(\'libfaac\')\n\n*\t__video.setAudioFrequency(frequency)__: Sets the audio sample frequency for audio outputs in kb. Example:\n\t\n\t\tvideo.setAudioFrequency(48)\n\n*\t__video.setAudioChannels(channel)__: Sets the number of audio channels. Example:\n\t\n\t\tvideo.setAudioChannels(2)\n\n*\t__video.setAudioBitRate(bitrate)__: Sets the audio bitrate in kb. Example:\n\t\n\t\tvideo.setAudioBitRate(128)\n\n*\t__video.setAudioQuality(quality)__: Sets the audio quality. Example:\n\t\n\t\tvideo.setAudioQuality(128)\n\n*\t__video.setWatermark(watermarkPath, settings)__: Sets the watermark. You must specify the path where the image is stored to be inserted as watermark\n\t\n\tThe possible settings (the values ​​shown are the default):\n\n\t*\t**position : "SW"** \n\t\t\n\t\tPosition: NE NC NW SE SC SW C CE CW\n\n\t*\t**margin_nord : null** \n\n\t\tMargin nord (specify in pixel)\n\n\t*\t**margin_sud : null** \n\n\t\tMargin sud (specify in pixel)\n\n\t*\t**margin_east : null** \n\n\t\tMargin east (specify in pixel)\n\n\t*\t**margin_west : null** \n\n\t\tMargin west (specify in pixel)\n\n\tExample:\n\n\t\t// In this example will be added the watermark at the bottom right of the video\n\t\tvideo.setWatermark(\'/path/to/retrieve/watermark_file.png\')\n\n## Add custom options\n\nIf the ffmpeg parameters are not present in the list of available function you can add it manually through the following function\n\n**video.addCommand(command, argument)**\n\nExample:\n\n\t// In this example will be changed the output to avi format\n\tvideo.addCommand(\'-f\', \'avi\');\n\n## Save the file\n\nAfter setting the desired parameters have to start the conversion process. To do this you must call the function \'save\'. This method takes as input the final destination of the file and optionally a callback function. If the function callback is not specified it\'s possible use the promise object.\n\n**video.save(destionationFileName, callback)**\n\nExample:\n\n\ttry {\n\t\tvar process = new ffmpeg(\'/path/to/your_movie.avi\');\n\t\tprocess.then(function (video) {\n\t\t\t\n\t\t\tvideo\n\t\t\t.setVideoSize(\'640x?\', true, true, \'#fff\')\n\t\t\t.setAudioCodec(\'libfaac\')\n\t\t\t.setAudioChannels(2)\n\t\t\t.save(\'/path/to/save/your_movie.avi\', function (error, file) {\n\t\t\t\tif (!error)\n\t\t\t\t\tconsole.log(\'Video file: \' + file);\n\t\t\t});\n\n\t\t}, function (err) {\n\t\t\tconsole.log(\'Error: \' + err);\n\t\t});\n\t} catch (e) {\n\t\tconsole.log(e.code);\n\t\tconsole.log(e.msg);\n\t}',
46 silly install resolved     _id: 'ffmpeg@0.0.4',
46 silly install resolved     dist:
46 silly install resolved      { shasum: '1c460df8e7da5127f62ceef4bfa06c59c89630cb',
46 silly install resolved        tarball: 'http://registry.npmjs.org/ffmpeg/-/ffmpeg-0.0.4.tgz' },
46 silly install resolved     maintainers: [ [Object] ],
46 silly install resolved     directories: {},
46 silly install resolved     _shasum: '1c460df8e7da5127f62ceef4bfa06c59c89630cb',
46 silly install resolved     _resolved: 'https://registry.npmjs.org/ffmpeg/-/ffmpeg-0.0.4.tgz',
46 silly install resolved     _from: 'ffmpeg@*' } ]
47 info install ffmpeg@0.0.4 into /usr/local/lib
48 info installOne ffmpeg@0.0.4
49 verbose installOne of ffmpeg to /usr/local/lib not in flight; installing
50 warn locking Error: EACCES, open '/Users/goer/.npm/_locks/ffmpeg-ca6c39008c22956d.lock'
50 warn locking  /Users/goer/.npm/_locks/ffmpeg-ca6c39008c22956d.lock failed { [Error: EACCES, open '/Users/goer/.npm/_locks/ffmpeg-ca6c39008c22956d.lock']
50 warn locking   errno: 3,
50 warn locking   code: 'EACCES',
50 warn locking   path: '/Users/goer/.npm/_locks/ffmpeg-ca6c39008c22956d.lock' }
51 verbose stack Error: Attempt to unlock /usr/local/lib/node_modules/ffmpeg, which hasn't been locked
51 verbose stack     at unlock (/usr/local/lib/node_modules/npm/lib/utils/locker.js:66:11)
51 verbose stack     at cb (/usr/local/lib/node_modules/npm/lib/install.js:972:5)
51 verbose stack     at /usr/local/lib/node_modules/npm/lib/install.js:976:20
51 verbose stack     at /usr/local/lib/node_modules/npm/lib/utils/locker.js:40:9
51 verbose stack     at cb (/usr/local/lib/node_modules/npm/node_modules/lockfile/lockfile.js:149:38)
51 verbose stack     at /usr/local/lib/node_modules/npm/node_modules/lockfile/lockfile.js:177:38
51 verbose stack     at Object.oncomplete (fs.js:107:15)
52 verbose cwd /Users/goer/projects/testaudio/server
53 error Darwin 14.3.0
54 error argv "node" "/usr/local/bin/npm" "install" "ffmpeg" "-g"
55 error node v0.10.29
56 error npm  v2.7.1
57 error Attempt to unlock /usr/local/lib/node_modules/ffmpeg, which hasn't been locked
58 error If you need help, you may report this error at:
58 error     <https://github.com/npm/npm/issues>
59 verbose exit [ 1, true ]
